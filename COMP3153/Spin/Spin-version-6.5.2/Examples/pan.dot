digraph p_calc {
size="8,10";
  GT [shape=box,style=dotted,label="calc"];
  GT -> S21;
	S21 -> S2  [color=black,style=bold,label="f?operator,s"];
	S21 -> S20  [color=black,style=bold,label="f?value,s"];
	S2 -> S3  [color=black,style=bold,label="(run calc(me))"];
	S3 -> S4  [color=black,style=bold,label="me?lft"];
	S4 -> S5  [color=black,style=bold,label="(run calc(me))"];
	S5 -> S17  [color=black,style=bold,label="me?rgt"];
	S17 -> S7  [color=black,style=solid,label="((s==43))"];
	S17 -> S9  [color=black,style=solid,label="((s==45))"];
	S17 -> S11  [color=black,style=solid,label="((s==42))"];
	S17 -> S14  [color=black,style=solid,label="((s==47))"];
	S17 -> S16  [color=black,style=solid,label="else"];
	S7 -> S23  [color=black,style=bold,label="you!(lft+rgt)"];
	S23 -> S0  [color=black,style=solid,label="-end-"];
  S23 [color=blue,style=bold,shape=box];
	S9 -> S23  [color=black,style=bold,label="you!(lft-rgt)"];
	S11 -> S23  [color=black,style=bold,label="you!(lft*rgt)"];
	S14 -> S23  [color=black,style=bold,label="you!(lft/rgt)"];
	S16 -> S23  [color=black,style=solid,label="assert(0)"];
	S20 -> S23  [color=black,style=bold,label="you!s"];
}
digraph init {
size="8,10";
  GT [shape=box,style=dotted,label="init"];
  GT -> S1;
	S1 -> S2  [color=black,style=bold,label="f!operator,43"];
	S2 -> S3  [color=black,style=bold,label="f!operator,47"];
	S3 -> S4  [color=black,style=bold,label="f!value,84"];
	S4 -> S5  [color=black,style=bold,label="f!value,2"];
	S5 -> S6  [color=black,style=bold,label="f!operator,45"];
	S6 -> S7  [color=black,style=bold,label="f!value,36"];
	S7 -> S8  [color=black,style=bold,label="f!operator,42"];
	S8 -> S9  [color=black,style=bold,label="f!value,3"];
	S9 -> S10  [color=black,style=bold,label="f!value,4"];
	S10 -> S11  [color=black,style=bold,label="(run calc(me))"];
	S11 -> S12  [color=black,style=bold,label="me?result"];
	S12 -> S13  [color=black,style=solid,label="printf('result: %d ',result)"];
	S13 -> S0  [color=black,style=solid,label="-end-"];
  S13 [color=blue,style=bold,shape=box];
}
